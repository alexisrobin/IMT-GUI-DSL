/*
 * generated by Xtext 2.10.0
 */
package org.imt.eval.gui2.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.imt.eval.gui2.gui2.Frame
import java.io.File
import org.imt.eval.gui2.gui2.FrameContent
import org.imt.eval.gui2.gui2.Label
import org.imt.eval.gui2.gui2.Button
import org.imt.eval.gui2.gui2.GUI

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class Gui2Generator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var gui = resource.contents.head as GUI
		var sep = File.separator

		//Building a platform independent URI
		var filePath = 'gui2'+sep+'FrameApplication.java';
		
		fsa.generateFile(filePath, gui.compile)	
	}
	
	def compile(GUI gui) '''
		import javax.swing.JFrame;
		import javax.swing.JLabel;
		import javax.swing.JButton;
		import javax.swing.SwingUtilities;
		import java.awt.FlowLayout;
		import java.awt.event.ActionEvent;
		import java.awt.event.ActionListener;
			
		public class FrameApplication {
			public static void main(String[] args) {
		 		SwingUtilities.invokeLater(new Runnable() {
		 			public void run() {
		 				
						«FOR Frame frame : gui.frames»
							JFrame «frame.frameName.name» = new JFrame();
						«ENDFOR»
						
						«FOR Frame frame : gui.frames»
							«frame.compile»
						«ENDFOR»
						«gui.frames.get(0).frameName.name».setVisible(true);
					}
				});
			}
		}
	'''
	
	def compile(Frame frame) '''
		«frame.frameName.name».setLayout(new FlowLayout());
		«frame.frameName.name».setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		«frame.frameName.name».setTitle("«frame.title»");
		«frame.frameName.name».setSize(«frame.width», «frame.height»);
		«FOR FrameContent fContent : frame.frameContents»
			«fContent.compile(frame, frame.frameContents.indexOf(fContent))» 
		«ENDFOR»
		
	'''
	
	def dispatch compile(Label label, Frame f, int idx) '''
		JLabel label«f.frameName.name»«idx» = new JLabel();
		«f.frameName.name».add(label«f.frameName.name»«idx»);
		label«f.frameName.name»«idx».setText("«label.content»");
	'''
	
	def dispatch compile(Button button, Frame f, int idx) '''
		JButton button«f.frameName.name»«idx» = new JButton();
		button«f.frameName.name»«idx».addActionListener(new ActionListener(){
			@Override
		 	public void actionPerformed(ActionEvent e)
		 	{
		 		«f.frameName.name».setVisible(false);
		 		«button.frameCall.frameName.name».setVisible(true);
		 	}
		});
		«f.frameName.name».add(button«f.frameName.name»«idx»);
		button«f.frameName.name»«idx».setText("«button.content»");
	'''
}
